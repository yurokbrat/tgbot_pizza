from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from create_bot import dp, bott
from data_base import devilery_db
from keyboards import client_offer_keyb, kb_client

ID = None

off = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑üÜï', callback_data='new_order'), \
                                            InlineKeyboardButton('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞‚ùî', callback_data='know_status'),
                                            InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑‚ùå', callback_data='cancel_order'), \
                                            InlineKeyboardButton('‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back'), \
                                            InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞', callback_data='test'))

back = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton('‚óÄÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back'))
class FSMClient(StatesGroup):
    offer = State()
    name = State()
    phone = State()
    place = State()


class StateOrder(StatesGroup):
    wait_order = State()

async def keys2(callback: types.CallbackQuery):
    if callback.data == 'test':
        await bott.send_message(callback.from_user.id,'–∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        await callback.answer()
    if callback.data == 'new_order':
        await bott.send_message(callback.from_user.id, f'–ö–∞–∫–æ–π –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–∏—Ç—å? '
                                                  f'\n–¥–æ–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π '
                                                  f'\n–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', reply_markup= back)
        await callback.answer()

    if callback.data == 'know_status':
        await bott.send_message(callback.from_user.id, '–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–¥–µ–ª—ã–≤–∞–µ—Ç—Å—è', reply_markup= back)
        await callback.answer()

    if callback.data == 'cancel_order':
        await bott.send_message(callback.from_user.id, '–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—Å—è –ø–æ–∑–¥–Ω–µ–µ', reply_markup= back)
        await callback.answer()

    if callback.data == 'back':
        await bott.send_message(callback.from_user.id, '–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        await bott.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                             reply_markup=off)
        await callback.answer()
'''    
    await StateOrder.wait_order.set()


async def cancel_handler(message: types.Message, state=FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ! ')


async def process_order_number(message: types.message, state: FSMContext):
    order_number = message.text
    await devilery_db.sql_read_status_command(order_number)
    await state.finish()



def register_handlers_client_offer(dp: Dispatcher):
    #dp.register_message_handler(hello_offer, commands=['–ó–∞–∫–∞–∑—ã'])
    dp.register_message_handler(new_offer, commands=['–û—Ñ–æ—Ä–º–∏—Ç—å_–Ω–æ–≤—ã–π_–∑–∞–∫–∞–∑'])
    dp.register_message_handler(read_status, commands=['–£–∑–Ω–∞—Ç—å_—Å—Ç–∞—Ç—É—Å_–∑–∞–∫–∞–∑–∞'])
    #dp.register_message_handler(cancel_handler, state='*', commands='–û—Ç–º–µ–Ω–∞')
    #dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(delete_offer, commands=['–û—Ç–º–µ–Ω–∏—Ç—å_–∑–∞–∫–∞–∑'])
    dp.register_message_handler(close_key, commands=['–£–±—Ä–∞—Ç—å_–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'])
    
'''
def register_handlers_client_offer(dp: Dispatcher):
    dp.register_callback_query_handler(keys2, lambda x: x.data)